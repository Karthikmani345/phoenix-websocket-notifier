<!DOCTYPE html>
<html>

<head>
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>

<body>

    <div id="root"></div>

    <script type="text/javascript">

    </script>

    <script type="text/babel">
        var baseUrl = "<%= baseUrl %>";
        const { useState } = React

        function App() {

            const [indentity, setIdentity] = useState('');
            const [message, setMessage] = useState('');
            const [notificationType, setNotificationType] = useState('');
            const [application, setApplication] = useState('');

            const reset = () => {
                debugger;
                setApplication('');
                setMessage('');
                setNotificationType('');
                setApplication('');
                setIdentity('');

            }

            const optionsNotification = [
                {
                    name: 'Select',
                    value: null,
                },
                {
                    name: 'Broadcast',
                    value: 'broadcast',
                },
                {
                    name: 'Direct',
                    value: 'direct',
                }
            ];

            const optionsApplication = [
                {
                    name: 'Select',
                    value: null,
                },
                {
                    name: 'Foo',
                    value: 'Foo',
                },
                {
                    name: 'Boo',
                    value: 'Boo',
                }
            ];





            const publish = () => {
                postNotification({ toIdentity: indentity, notficationType: notificationType, application: application, payload: message });

            };

            function postNotification(rest) {
                fetch(`${baseUrl}/notify`,
                    {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(rest)
                    }
                ).then(async response => {
                    debugger;
                    reset();
                    const res = await response.json();
                });
            }



            return <>
                <div className="jumbotron text-center">
                    <h1>Websocket Client</h1>
                    <p>Publish a message to connected clients</p>
                </div>
                <div className="container">
                    <div className="row">
                        <div className="col-lg-3"> </div>
                        <div className="col-lg-6">
                            <form>
                                <div class="form-group">
                                    <label for="exampleFormControlTextarea1"> To Identity</label>
                                    <input type="text" class="form-control" rows="3" value={indentity} onChange={(e) => setIdentity(e.target.value)} />
                                </div>
                                <div class="form-group">
                                    <label for="exampleFormControlInput1">Application Name</label>
                                    <br />
                                    <select name="input-app-name" id="input-app-name" className="dropdown-toggle" value={application} onChange={(e) => setApplication(e.target.value)}>
                                        {optionsApplication.map(o => {
                                            return <option key={o.value} value={o.value}>{o.name}</option>
                                        })}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="exampleFormControlInput1">Notfication Type</label>
                                    <br />
                                    <select name="input-app-name" id="input-app-name" className="dropdown-toggle " value={notificationType} onChange={(e) => setNotificationType(e.target.value)}>
                                        {optionsNotification.map(o => {
                                            return <option key={o.value} value={o.value}>{o.name}</option>
                                        })}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="exampleFormControlTextarea1"> Message</label>
                                    <input type="text" class="form-control" rows="3" value={message} onChange={(e) => setMessage(e.target.value)} />
                                </div>
                                <div className="form-group">
                                    <button id="connect-btn" type="button" className="btn btn-success" onClick={publish}>Notify</button>
                                </div>
                            </form>
                        </div>
                        <div className="col-lg-3"></div>
                    </div>
                </div>

            </>
        }

        ReactDOM.render(<App />, document.getElementById('root'))
    </script>

</body>

</html>